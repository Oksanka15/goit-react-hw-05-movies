{"version":3,"file":"static/js/107.d55745d6.chunk.js","mappings":"8NAIaA,EAAkBC,EAAAA,GAAAA,GAAH,sHAOfC,GAAWD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,0IAyBRG,IAfmBH,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,+QAePA,EAAAA,GAAAA,IAAH,kHAONI,EAAQJ,EAAAA,GAAAA,EAAH,6EAKLK,EAASL,EAAAA,GAAAA,KAAH,mJ,mBC3CNM,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACV,EAAD,UACGQ,EAAOG,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAOC,EAAb,EAAaA,aAAeC,EAA5B,EAA4BA,YAA5B,OACV,yBACE,UAACb,EAAD,CAAUc,GAAE,kBAAaJ,GAAMK,MAAO,CAACC,KAAKT,GAA5C,WACE,SAACL,EAAD,CAAQe,IAAMC,EAAAA,EAAeL,EAC3BM,IAAKR,KACL,SAACR,EAAD,UAAQQ,KACR,SAACP,EAAD,UAASQ,EAAeA,EAAaQ,QAAQ,GAAK,YAL/CV,EADC,KAYjB,C,kFCJD,UAba,WACX,OAA4BW,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAegB,EAAf,KAKA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MAAoBC,KAAKH,EAC1B,GAAE,KAGD,0BAEE,SAAC,IAAD,CAAYhB,OAAQA,KAGzB,C,mMCVDoB,EAAAA,EAAAA,SAAAA,QAAyB,+BAClB,IAAMC,EAAU,mCAEVH,EAAiB,mCAAG,oGACZE,EAAAA,EAAAA,IAAA,uBAAkC,CACnDE,OAAQ,CACNC,QAASF,EACTG,KAAM,KAJqB,cACzBC,EADyB,yBAOxBA,EAAKC,KAAKC,SAPc,2CAAH,qDAWjBC,EAAgB,mCAAG,WAAMC,GAAN,uFACTT,EAAAA,EAAAA,IAAA,8CACsBS,EADtB,+BAEjB,CACEP,OAAQ,CACNC,QAASF,EACTG,KAAM,KANgB,cACtBC,EADsB,yBAUrBA,EAAKC,KAAKC,SAVW,2CAAH,sDAahBG,EAAe,mCAAG,WAAM1B,GAAN,uFACRgB,EAAAA,EAAAA,IAAA,gBAAmBhB,EAAnB,oBAAyC,CAC1DkB,OAAQ,CACNC,QAASF,KAHc,cACrBI,EADqB,yBAMpBA,EAAKC,MANe,2CAAH,sDASbK,EAAY,mCAAG,WAAM3B,GAAN,uFACPgB,EAAAA,EAAAA,IAAA,gBAAmBhB,EAAnB,4BAAiD,CAClEkB,OAAQ,CACNC,QAASF,KAHa,cACpBI,EADoB,yBAMnBA,EAAKC,KAAKM,MANS,2CAAH,sDASZC,EAAe,mCAAG,WAAM7B,GAAN,uFACVgB,EAAAA,EAAAA,IAAA,gBAAmBhB,EAAnB,4BAAiD,CAClEkB,OAAQ,CACNC,QAASF,KAHgB,cACvBI,EADuB,yBAMtBA,EAAKC,KAAKC,SANY,2CAAH,qD,uDCpDvB,IAAMf,EAAe,iC","sources":["components/MoviesList/MovieList.styled.js","components/MoviesList/MoviesList.jsx","components/pages/Home/Home.jsx","components/servises/apiServises.js","components/servises/constants.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { NavLink } from 'react-router-dom';\n\n\nexport const MoviesListStyle = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 8px;\n  list-style: none;\n`;\n\nexport const ListLink = styled(NavLink)`\n  text-decoration: none;\n  color: #000;\n  font-weight: 500;\n  &:hover,\n  &:focus {\n    color: #be7214;\n  }\n`;\n\nexport const ButtonStyledLink = styled(NavLink)`\n  text-decoration: none;\n  color: #000;\n  font-weight: 700;\n  padding: 8px;\n  background-color: #f7f2c7;\n  border: 2px solid #727272;\n  border-radius: 10px;\n  &:hover,\n  &:focus {\n    color: #be7214;\n    background-color: #ecf5f0;\n  }\n`;\n\nexport const Poster = styled.img`\n  width: 100%;\n  object-fit: cover;\n  object-position: center;\n  margin-bottom: 5px;\n`;\n\nexport const Title = styled.p`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Rating = styled.span`\n  display: inline-block;\n  max-height: 1.2em;\n  background-color: #dddd06;\n  padding: 3px 6px;\n  border-radius: 10px;\n`;\n","\nimport { useLocation } from 'react-router-dom';\nimport { MoviesListStyle ,ListLink, Poster ,Rating, Title} from './MovieList.styled';\nimport { BASE_IMG_URL } from 'components/servises/constants';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesListStyle>\n      {movies.map(({id, title, vote_average , poster_path}) => (\n        <li key={id}>\n          <ListLink to={`/movies/${id}`} state={{from:location}}>\n            <Poster src={ BASE_IMG_URL + poster_path}\n              alt={title}/>\n              <Title>{title}</Title>\n              <Rating>{vote_average ? vote_average.toFixed(1) : 'N/A'}</Rating> \n          </ListLink>\n        </li>\n      ))}\n    </MoviesListStyle>\n  );\n};\n","import { getTrendingMovies } from 'components/servises/apiServises';\nimport { useState, useEffect } from 'react';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\n\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    getTrendingMovies().then(setMovies);\n  }, []);\n\n  return (\n    <div>\n     \n      <MoviesList movies={movies} />\n    </div>\n  );\n};\nexport default Home;\n","//API_KEY = d9a0cc661b661e7359674d300e5af663\n// https://api.themoviedb.org/3/movie/550?api_key=d9a0cc661b661e7359674d300e5af663\n//https://api.themoviedb.org/3/search/movie?&language=en-US&query=${query}&page=1&include_adult=false\n//movie/${id}?&language=en-US\n//export const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w400';\n\nimport axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nexport const API_KEY = 'd9a0cc661b661e7359674d300e5af663';\n\nexport const getTrendingMovies = async () => {\n  const resp = await axios.get(`/trending/movie/day?`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    },\n  });\n  return resp.data.results;\n};\n\n\nexport const getMoviesByQuery = async query => {\n    const resp = await axios.get(\n      `/search/movie?&language=en-US&query=${query}&page=1&include_adult=false`,\n      {\n        params: {\n          api_key: API_KEY,\n          page: 1,\n        },\n      }\n    );\n    return resp.data.results;\n  };\n\nexport const getMovieDetails = async id => {\n    const resp = await axios.get(`movie/${id}?&language=en-US`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return resp.data;\n  };\n  \n  export const getMovieCast = async id => {\n    const resp = await axios.get(`movie/${id}/credits?&language=en-US`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return resp.data.cast;\n  };\n  \n  export const getMovieReviews = async id => {\n    const resp = await axios.get(`movie/${id}/reviews?&language=en-US`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return resp.data.results;\n  };","export const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w400';\n"],"names":["MoviesListStyle","styled","ListLink","NavLink","Poster","Title","Rating","MoviesList","movies","location","useLocation","map","id","title","vote_average","poster_path","to","state","from","src","BASE_IMG_URL","alt","toFixed","useState","setMovies","useEffect","getTrendingMovies","then","axios","API_KEY","params","api_key","page","resp","data","results","getMoviesByQuery","query","getMovieDetails","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}